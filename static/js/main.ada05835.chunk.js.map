{"version":3,"sources":["utils.js","constants.js","Game/gameComponents.js","Engine/vector.js","Engine/levels.js","Engine/core.js","Game/state.js","Game/game.js","App.js","serviceWorker.js","index.js"],"names":["registerListener","eventName","handler","window","addEventListener","removeEventListener","guidGenerator","Math","random","toString","substring","getRandomFrom","args","floor","length","colors","GAME_WIDTH","GAME_HEIGHT","GameBall","x","y","radius","className","cx","cy","r","Block","width","height","density","color","fill","rx","font-size","class","Vector","this","number","hypot","scaleBy","other","amt","dotProduct","normal","subtract","projectOn","degrees","radians","PI","toRadians","cos","sin","atan2","crossProduct","levelNumber","index","makeBlock","randomize","position","id","add","Levels","levelList","currentLevel","newlevelArray","transformLevelsDown","i","newBlock","push","unshift","flat","forEach","element","elementPosition","newElementPosition","LEFT","RIGHT","UP","DOWN","LEFT_UP","normalize","RIGHT_UP","Ball","angle","center","direction","BallPhysics","ballsArray","markerBall","firstBall","isStarted","Number","isNaN","console","log","newBall","state","timespan","ball","level","distance","ballIndex","findIndex","oldDirection","newBallCenter","ballBottom","newArray","filter","filterBall","withNewBallProps","props","withNewBallDirection","reflect","ballLeft","ballRight","ballTop","block","find","boundaryCheck","filterBlock","blockTop","blockBottom","blockLeft","getNewBallNormal","getProjection","containerSize","gameSize","widthRatio","heightRatio","screenUnit","min","projectDistance","projectDistanceReverse","projectVector","vector","projectVectorReverse","objectSide","objectSide2","boundarySide","boundarySide2","ACTION","CONTAINER_SIZE_CHANGE","KEY_UP","MOUSE_MOVE","TICK","reducer","type","payload","containerSizeChange","onKeyUp","AIMING","aimBalls","mouseMove","tick","isAiming","setTimeout","addBall","mousePosition","oldMousePosition","newMousePosition","key","movement","undefined","time","Date","now","newState","updatePhysics","addLevel","reset","GamePage","gameContainer","useRef","useState","size","setSize","mouse","setMouse","click","setClick","useEffect","onResize","current","getBoundingClientRect","unregisterResizeListener","unregisterMouseMoveListener","e","clientX","clientY","onMouseOver","unregisterMouseDownListener","unregisterMouseUpListener","ref","getInitialState","getInitialLevelState","Scene","useReducer","dispatch","act","svgContainer","ballPointer1","ballPointer2","ballPointer3","ballPointer4","ballPointer5","setMousePosition","ballAngle","setBallAngle","viewWidth","viewHeight","unit","pointerCordX","pointerCordY","lineCords","reference","offsetX","offsetY","newDegree","rotateElement","onMouseMove","el","originX","originY","towardsX","towardsY","setAttribute","timerId","setInterval","unregisterKeyup","which","clearInterval","map","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ada05835.chunk.js","sourcesContent":["export const registerListener = (eventName, handler) => {\r\n    window.addEventListener(eventName, handler);\r\n    return () => window.removeEventListener(eventName, handler);\r\n}\r\n\r\nexport const registerListenerByReference = (eventName, handler, reference) => {\r\n    reference.current.addEventListener(eventName, handler);\r\n    return () => reference.current.removeEventListener(eventName, handler);\r\n}\r\n\r\nexport const mapNumbers = (num, in_min, in_max, out_min, out_max) => {\r\n    return (num - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\r\n  }\r\n  \r\nexport function guidGenerator() {\r\n    var S4 = function() {\r\n      return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\r\n    };\r\n    return (S4());\r\n  }\r\n\r\nexport const flatten = arrays => arrays.reduce((acc, row)=>[...acc, ...row], []);\r\nexport const getRange = length => [...Array(length).keys()];\r\nexport const toDegrees = radians => (radians * 180) / Math.PI\r\nexport const toRadians = degrees => (degrees * Math.PI) / 180\r\nexport const withoutElement = (array, element) => array.filter(e => e !== element)\r\nexport const updateElement = (array, oldElement, newElement) => array.map(e => e === oldElement ? newElement : e)\r\nexport const getRandomFrom = (...args) => args[Math.floor(Math.random()* args.length)]\r\n","\r\nexport const colors = [\"#4ABFF0\",  \"#F23737\",  \"#835995\", \"#9FCE31\", \"#FFCC00\"];\r\nexport const PADDLE_AREA = 1 / 3\r\nexport const BLOCK_HEIGHT = 1 / 3\r\nexport const PADDLE_HEIGHT = BLOCK_HEIGHT\r\nexport const BALL_RADIUS = 1 / 5\r\nexport const DISTANCE_IN_MS = 0.1\r\nexport const UPDATE_EVERY = 1000 / 60\r\nexport const MAX_BLOCK_DENSITY = 3;\r\nexport const GAME_WIDTH = 9;\r\nexport const GAME_HEIGHT = 11;\r\nexport const MOVEMENT = {\r\n    LEFT: 'LEFT',\r\n    RIGHT: 'RIGHT'\r\n}\r\n","import React from 'react';\r\nimport {colors} from '../constants'\r\nexport const GameBall = ({x,y, radius}) => (\r\n    <circle className = 'ball' cx={x} cy={y} r = {radius}/>\r\n)\r\n\r\nconst getBlockColors = (density) => {\r\n    if (density % 2){\r\n        return colors[1]\r\n    }\r\n    if (density % 3){\r\n        return colors[2]\r\n    }\r\n    if (density % 4){\r\n        return colors[3]\r\n    }\r\n    if (density % 5){\r\n        return colors[4]\r\n    }\r\n}\r\n\r\nexport const Block =({ x, y, width, height, density, color }) => {\r\n    return (\r\n    <g>\r\n    <rect className='block' fill={color} x={x} y={y}  rx = {width / 16} width={width - 5} height={height-3} />\r\n    <text x={(x + (width / 2) - 6)} y = {y + (height / 2) + 3} font-size = {20} class = 'level'>\r\n        {density}\r\n    </text>\r\n    </g>\r\n);\r\n}\r\n\r\nexport const LevelLabel = ({level, unit}) => (\r\n    <text x={unit} y = {unit * 2} className = 'level'>\r\n        LEVEL: {level}\r\n    </text>\r\n)\r\n\r\n\r\n\r\nexport const Paddle = ({ x, y, width, height }) => (\r\n    <rect className='paddle' x={x} y={y} width={width} height={height}  rx = {width / 16} />\r\n  )\r\n\r\n\r\nexport const trajectoryPointer = (circlemarker, projectvector) => {\r\n    let {x, y} = projectvector(circlemarker);\r\n    return (\r\n    <>\r\n    <circle className = 'ball' cx={x} cy={y} r = {1/5} style = {{transformOrigin: \"0px 10px\", transform: \"rotate(30)\"}} />\r\n    </>\r\n    )\r\n}","import { toDegrees, toRadians } from '../utils'\r\n\r\n\r\nexport default class Vector {\r\n    constructor(x, y) {\r\n      this.x = x\r\n      this.y = y\r\n    }\r\n  \r\n    scaleBy(number) {\r\n      return new Vector(this.x * number, this.y * number);\r\n    }\r\n  \r\n    length() {\r\n      return Math.hypot(this.x, this.y)\r\n    }\r\n  \r\n    add({ x, y }) {\r\n      return new Vector(this.x + x, this.y + y)\r\n    }\r\n  \r\n    normalize() {\r\n      return this.scaleBy(1 / this.length())\r\n    }\r\n    \r\n    subtract({ x, y }) {\r\n      return new Vector(this.x - x, this.y - y)\r\n    }\r\n  \r\n    dotProduct({ x, y }) {\r\n      return this.x * x + this.y * y\r\n    }\r\n  \r\n    projectOn(other) {\r\n      const amt = this.dotProduct(other) / other.length()\r\n      return new Vector(amt * other.x, amt * other.y)\r\n    }\r\n  \r\n    reflect(normal) {\r\n      return this.subtract(this.projectOn(normal).scaleBy(2))\r\n    }\r\n  \r\n    rotate(degrees) {\r\n      const radians = toRadians(degrees)\r\n      const cos = Math.cos(radians)\r\n      const sin = Math.sin(radians)\r\n  \r\n      return new Vector(\r\n        this.x * cos - this.y * sin,\r\n        this.x * sin + this.y * cos\r\n      )\r\n    }\r\n  \r\n    crossProduct({ x, y }) {\r\n      return this.x * y - x * this.y\r\n    }\r\n  \r\n    angleBetween(other) {\r\n      return toDegrees(\r\n        Math.atan2(this.crossProduct(other), this.dotProduct(other))\r\n      )\r\n    }\r\n  }","import {GAME_WIDTH, colors} from '../constants'\r\n//import { flatten } from '../utils'\r\nimport Vector from './vector'\r\nimport { guidGenerator, getRandomFrom } from '../utils';\r\n//TODO: generate Block other position parameters based on position\r\nconst DOWN = new Vector(0, 1);\r\n\r\nclass Block {\r\n    constructor(levelNumber, index) {\r\n        this.makeBlock = this.randomize();\r\n        this.density = levelNumber;\r\n        this.position = new Vector(index, 0) // X, Y cords1Q ``` \r\n        this.width = 1;\r\n        this.height = 1;\r\n        this.id = guidGenerator();\r\n        this.color = colors[Math.floor(Math.random() * colors.length)]\r\n\r\n    }\r\n\r\n    add(x, y) {\r\n        this.position.add(x, y);\r\n    }\r\n\r\n    randomize() {\r\n        return Math.floor(Math.random() * 1.6);\r\n    }\r\n\r\n}\r\n\r\nexport class Levels  {\r\n    constructor(){\r\n        this.levelList = [];\r\n        this.currentLevel = 0;\r\n    }\r\n\r\n    addLevel(){\r\n        this.currentLevel++;\r\n        let newlevelArray = [];\r\n        if (this.levelList !== []){\r\n            this.transformLevelsDown();\r\n        }\r\n        for( let i = 0;  i < GAME_WIDTH; i++){\r\n            let newBlock = new Block(this.currentLevel, i);\r\n            if (newBlock.makeBlock !== 0) {\r\n                newlevelArray.push(newBlock);\r\n            }\r\n\r\n        }\r\n        this.levelList.unshift(newlevelArray);\r\n        this.levelList = this.levelList.flat();\r\n\r\n    }\r\n\r\n    transformLevelsDown(){   \r\n        this.levelList.forEach(element => {\r\n            const elementPosition = element.position;\r\n            const newElementPosition = new Vector(elementPosition.x, elementPosition.y + 1);\r\n            element.position = newElementPosition;\r\n        })\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\n","import Vector from \"./vector\";\r\nimport {getRandomFrom, guidGenerator} from '../utils'\r\nimport {GAME_HEIGHT, GAME_WIDTH} from '../constants'\r\n\r\nimport {Levels} from './levels';\r\n//Game core puts size and positions in relative to game size which then gets projected to the actual size\r\n\r\n\r\nconst DISTANCE_IN_MS = 0.01\r\n\r\nexport const MOVEMENT = {\r\n  LEFT: 'LEFT',\r\n  RIGHT: 'RIGHT'\r\n}\r\n\r\nconst LEFT = new Vector(-1, 0)\r\nconst RIGHT = new Vector(1, 0)\r\nconst UP = new Vector(0, -1)\r\nconst DOWN = new Vector(0, 1)\r\n\r\nexport const LEFT_UP = LEFT.add(UP).normalize()\r\nexport const RIGHT_UP = RIGHT.add(UP).normalize()\r\n\r\n/**\r\n * @function getInitialPaddleAndBallState - Returns the initial state of Paddle and Ball\r\n * @param {Number} gameWidth Game nonprojected width\r\n * @param {Number} gameHeight Game nonprojected Height\r\n * @param {Number} paddleWidth Width of the paddle per level.\r\n * @returns {JSON} Returns paddle and ball state\r\n */\r\nexport const getInitialBallPosition = (gameWidth, gameHeight) => {\r\n    const ball = {\r\n        center: new Vector(GAME_WIDTH / 2, GAME_HEIGHT - ( 1 / 5)),\r\n        radius: 1 / 5,\r\n        direction: getRandomFrom(LEFT_UP, RIGHT_UP)\r\n      }\r\n    return {\r\n        ball\r\n    }\r\n}\r\n\r\n\r\nexport const getInitialLevelState = () => \r\n{   \r\n    let level = new Levels();\r\n    level.addLevel(1);\r\n    return {\r\n        level: level\r\n      }\r\n}\r\n\r\n\r\nexport const getInitialBallState = () => {\r\n  let balls = new BallPhysics();\r\n  return balls;\r\n}\r\n\r\nclass Ball {\r\n  constructor(x,y, angle, radius, id){\r\n    this.center = new Vector(x, y);\r\n    this.direction = angle;\r\n    this.radius = radius;\r\n    this.id = id;\r\n  }\r\n}\r\n\r\nexport class BallPhysics {\r\n  constructor() {\r\n    this.ballsArray = [];\r\n    this.markerBall = new Ball(GAME_WIDTH / 2, GAME_HEIGHT - ( 1 / 5), getRandomFrom(LEFT_UP, RIGHT_UP), 1/5, 0);\r\n    this.firstBall = false;\r\n    this.isStarted = false;\r\n  }\r\n\r\n\r\n  reset() {\r\n    this.firstBall = false;\r\n    this.isStarted = false;\r\n  }\r\n  addBall(angle){\r\n    //TODO: to add a ball, add a new Ball, based off of markerBall X, and Y position, along with angle we are launching from\r\n    //TODO: then we can update physics on each Ball, every iteration\r\n    /*Some special things need to happen in physics, like identifying the first one down.\r\n    * Once the first one is down, we use the same kind of thing, where we make marker ball, the X position and \r\n    * reset Y position to Game height -  ball radius which is 1/5\r\n    */\r\n    if(Number.isNaN(angle.x) || Number.isNaN(angle.y)){}\r\n      else{\r\n        //TODO add angle calculation here\r\n        let id = guidGenerator();\r\n        console.log(angle);\r\n        console.log(this.markerBall.center.x);\r\n        let newBall = new Ball(this.markerBall.center.x, this.markerBall.center.y, angle, 1/5, id);\r\n        this.ballsArray.push(newBall);\r\n        this.isStarted = true;\r\n    }\r\n  }\r\n\r\n  //We will update physics passing in the block state, and then returning updated block and ball state to render\r\n  updatePhysics(state, timespan){\r\n      this.ballsArray.forEach(ball => {\r\n        const { level } = state\r\n        const distance = timespan * DISTANCE_IN_MS\r\n        var ballIndex = this.ballsArray.findIndex(x => x.id == ball.id);\r\n        const { radius } = ball\r\n        const oldDirection = ball.direction\r\n        const newBallCenter = ball.center.add(oldDirection.scaleBy(distance))\r\n        const ballBottom = newBallCenter.y + radius\r\n\r\n        // Delete if above gameheight \r\n        if (ballBottom > GAME_HEIGHT) {\r\n          //check if its the first ball to hit the bottom\r\n          if (this.firstBall === false) {\r\n            this.firstBall = true;\r\n            this.markerBall = new Ball(ball.center.x, GAME_HEIGHT - (1/5), {x: 0, y: 0}, 1/5, 0)\r\n          }\r\n          //filter out this element\r\n          let newArray = this.ballsArray.filter(filterBall => filterBall.id != ball.id);\r\n          return (this.ballsArray = newArray);\r\n        }\r\n        \r\n        const withNewBallProps = props => {\r\n            this.ballsArray[ballIndex] = {\r\n              ...ball,\r\n              ...props\r\n            }\r\n          return;\r\n        }\r\n\r\n        const withNewBallDirection = normal => {\r\n          //  const distorted = distortVector(oldDirection.reflect(normal))\r\n          //  const direction = adjustVector(normal, distorted)\r\n          const direction = oldDirection.reflect(normal);\r\n          return withNewBallProps({ direction }) \r\n        }\r\n        const ballLeft = newBallCenter.x - radius\r\n        const ballRight = newBallCenter.x + radius\r\n        const ballTop = newBallCenter.y - radius\r\n    \r\n        if (ballTop <= 0) return withNewBallDirection(DOWN)\r\n        if (ballLeft <= 0) return withNewBallDirection(RIGHT)\r\n        if (ballRight >= GAME_WIDTH) return withNewBallDirection(LEFT)\r\n      \r\n        const block = level.levelList.find(({ position, width, height }) => (\r\n          boundaryCheck(ballTop, ballBottom, position.y, position.y + height) &&\r\n          boundaryCheck(ballLeft, ballRight, position.x, position.x + width) \r\n        ))\r\n    \r\n    \r\n        if (block) {\r\n          block.density = block.density - 1\r\n          if (block.density <= 0){\r\n            let newArray = state.level.levelList.filter(filterBlock => filterBlock.id != block.id);\r\n            state.level.levelList = newArray;\r\n          }\r\n          // const newBlock = { ...block, density }\r\n          // const blocks = density < 0 ? withoutElement(state.blocks, block) : updateElement(state.blocks, block, newBlock)\r\n          const getNewBallNormal = () => {\r\n\r\n            const blockTop = block.position.y\r\n            const blockBottom = blockTop + block.height\r\n            const blockLeft = block.position.x\r\n\r\n            if (ballTop > blockTop - radius && ballBottom < blockBottom + radius) {\r\n              if (ballLeft < blockLeft) return LEFT\r\n              if (ballRight > blockLeft + block.width) return RIGHT\r\n            }\r\n\r\n            if (ballTop > blockTop) return DOWN\r\n            if (ballTop <= blockTop) return UP\r\n\r\n          }\r\n          return {\r\n            ...withNewBallDirection(getNewBallNormal())\r\n          }\r\n        }\r\n        return withNewBallProps({ center: newBallCenter })\r\n      })\r\n\r\n      return state;\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n/**\r\n * @function getProjection - gets the scaling size for the screen and container size\r\n * @param {*} containerSize - Size of the container {width: number, height: number}\r\n * @param {*} gameSize - Game Size to be projected on the container {width: number, height: number}\r\n * @returns {Function} - Returns two functions projectDistance, and projectVector\r\n */\r\n\r\nexport const getProjection = (containerSize, gameSize) => {\r\n    //Find the ratios between width and height compare to find the smallest\r\n    const widthRatio = containerSize.width / GAME_WIDTH\r\n    const heightRatio = containerSize.height / GAME_HEIGHT;\r\n    const screenUnit = Math.min(heightRatio, widthRatio);\r\n    return {\r\n        /**\r\n         * @function projectDistance - projects the distance onto the current screen size\r\n         * @param {Number} distance - distance to project\r\n         * @returns {Number} returns the position on screen\r\n         */\r\n\r\n        projectDistance: distance => distance * screenUnit,\r\n        projectDistanceReverse : distance => distance / screenUnit,\r\n        /**\r\n         * @function projectVector - projects the distance onto the current screen size\r\n         * @param {Vector} vector - vector to project to screen size\r\n         * @returns {Vector} returns scaled vector\r\n         */\r\n        projectVector: vector => vector.scaleBy(screenUnit),\r\n        projectVectorReverse: vector => vector.scaleBy(1 / screenUnit)\r\n\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @function distortVector - adds randomness to a vector\r\n * @param {*} vector -input vector to distort\r\n * @param {*} distortionLevel - Amount to distort\r\n */\r\n\r\nconst distortVector = (vector, distortionLevel = 0.3) => {\r\n    //get random components for the vector based on distortion level and create a new vector\r\n    const getComponent = () => Math.random() * distortionLevel - distortionLevel / 2\r\n    const distortion = new Vector(getComponent(), getComponent());\r\n    //add it to the vector and normalize it.\r\n    return vector.add(distortion).normalize()\r\n}\r\n\r\n\r\n/**\r\n * @function boundaryCheck - checks if we are inside another objects boundaries\r\n * @param {*} objectSide -Object we are checking side 1\r\n * @param {*} objectSide2 -object checking side 2\r\n * @param {*} boundarySide - boundary object side 1\r\n * @param {*} boundarySide2 - boundary object side 2\r\n */\r\nconst boundaryCheck = (objectSide, objectSide2, boundarySide, boundarySide2) => (\r\n    (objectSide >= boundarySide && objectSide <= boundarySide2) ||\r\n    (objectSide2 >= boundarySide && objectSide2 <= boundarySide2)  \r\n)\r\n\r\n/**\r\n * @function adjustVector - Adjusts ball so it never goes below certain degrees +90 and -90 degrees\r\n */\r\nconst adjustVector = (normal, vector, minAngle = 15) => {\r\n    const angle = normal.angleBetween(vector)\r\n    const maxAngle = 90 - minAngle\r\n    if (angle < 0) {\r\n      if (angle > -minAngle) {\r\n        return normal.rotate(-minAngle)\r\n      }\r\n      if (angle < -maxAngle) {\r\n        return normal.rotate(-maxAngle)\r\n      }\r\n    } else {\r\n      if (angle < minAngle) {\r\n        return normal.rotate(minAngle)\r\n      }\r\n      if (angle > maxAngle) {\r\n        return normal.rotate(maxAngle)\r\n      }\r\n    }\r\n    return vector\r\n}\r\n","import { MOVEMENT, updateGameState, getProjection, RIGHT_UP, LEFT_UP } from '../Engine/core'\r\nimport { GAME_WIDTH, GAME_HEIGHT } from '../constants'\r\nimport Vector from '../Engine/vector'\r\n\r\n \r\nexport const ACTION = {\r\n    CONTAINER_SIZE_CHANGE: 'CONTAINER_SIZE_CHANGE',\r\n    KEY_UP: 'KEY_UP',\r\n    MOUSE_MOVE: 'MOUSE_MOVE',\r\n    TICK: 'TICK'\r\n  }\r\n  \r\n /** Game Constants */\r\n  const MOVEMENT_KEYS = {\r\n    LEFT: [65, 37, \"ArrowLeft\"],\r\n    RIGHT: [68, 39, \"ArrowRight\"]\r\n  }\r\n\r\n  const STOP_KEY = 32\r\n\r\nexport const reducer = (state, { type, payload }) => {\r\n    switch(type) {\r\n        case ACTION.CONTAINER_SIZE_CHANGE:\r\n            return containerSizeChange(state, payload);\r\n        case ACTION.KEY_UP:\r\n            return onKeyUp(state, payload);\r\n        case ACTION.AIMING:\r\n            return aimBalls(state, payload)\r\n        case ACTION.MOUSE_MOVE:\r\n            return mouseMove(state, payload);\r\n        case ACTION.TICK:\r\n            return tick(state); \r\n        default:\r\n             return state;\r\n    }\r\n  }\r\n  \r\nconst containerSizeChange = (state, containerSize)=> ({\r\n    ...state,\r\n    containerSize,\r\n    ...getProjection(containerSize, {x: GAME_WIDTH, y: GAME_HEIGHT})\r\n  })\r\n\r\nconst aimBalls = (state, props) => {\r\n  state.isAiming = false;\r\n  for (let i = 0; i < state.levelNumber - 1; i++) {\r\n      setTimeout((i) => {\r\n        // console.log(props.angle);\r\n        state.ball.addBall(new Vector(Math.cos(props.angle), Math.sin(props.angle)));\r\n      }, 100 * i);\r\n  }\r\n  return state;\r\n}\r\nconst mouseMove = (state, mousePosition) => {\r\n    return {\r\n        ...state,\r\n        oldMousePosition: state.newMousePosition,\r\n        newMousePosition: mousePosition\r\n    }\r\n  }\r\nconst onKeyUp = (state, key) => {\r\n    const newState = { ...state, movement: undefined }\r\n    return newState\r\n}\r\n\r\nconst tick = (state) => {\r\n    if (state.isAiming) return state;\r\n    const time = Date.now()\r\n    // let newState = updateGameState({...state}, time - state.time)\r\n    let newState = state.ball.updatePhysics(state, (time - state.time));\r\n    if (newState.ball.isStarted && newState.ball.ballsArray.length === 0){\r\n      newState.ball.isStarted = false;\r\n      newState.level.addLevel();\r\n      newState.isAiming = true;\r\n      newState.levelNumber++;\r\n      newState.ball.reset();\r\n    }\r\n    newState = { ...newState, time }\r\n    return { ...newState }\r\n}\r\n\r\n ","import React, { useRef, useEffect, useState, useReducer } from 'react'\r\nimport {registerListener,registerListenerByReference, getRandomFrom, mapNumbers} from '../utils'\r\nimport {GameBall, Block, trajectoryPointer} from './gameComponents'\r\nimport { getInitialLevelState, getProjection, getInitialBallPosition, getInitialBallState, RIGHT_UP, LEFT_UP } from '../Engine/core'\r\nimport {reducer, ACTION} from './state'\r\nimport {UPDATE_EVERY, GAME_WIDTH, GAME_HEIGHT} from '../constants'\r\nimport Vector from '../Engine/vector'\r\n\r\n\r\nexport const GamePage = () => {\r\n    const gameContainer = useRef();\r\n    const [size, setSize] = useState();\r\n    const [mouse, setMouse] = useState({x: 0, y: 0});\r\n    const [click, setClick] = useState(false);\r\n    useEffect(() => {\r\n      //TODO: Optimize the calls for listeners\r\n        const onResize = ()=>{\r\n            //On resize get the current size ofthe screen and set it\r\n            const {width, height} = gameContainer.current.getBoundingClientRect(); \r\n            setSize({width, height})\r\n        }\r\n        const unregisterResizeListener = registerListener('resize', onResize);\r\n\r\n        const onMouseOver = (e) => {\r\n          setMouse({x: e.clientX, y: e.clientY})\r\n        }\r\n\r\n        const unregisterMouseMoveListener = registerListener('mousemove',(e)=> onMouseOver(e));\r\n\r\n        const onMouseDown = (e) => {\r\n          setClick(true);\r\n        }\r\n        const unregisterMouseDownListener = registerListener('mousedown',(e)=> onMouseDown(e));\r\n\r\n        const onMouseUp = (e) => {\r\n          setClick(false);\r\n        }\r\n        const unregisterMouseUpListener = registerListener('mouseup',(e)=> onMouseUp(e));\r\n        onResize();\r\n\r\n        return {unregisterResizeListener, unregisterMouseMoveListener, unregisterMouseDownListener, unregisterMouseUpListener}; //unregister the listener when not rendered anymore\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className = 'page'>\r\n            <div className = 'scene-container' ref = {gameContainer}>\r\n                {size && <Scene width = {size.width} height = {size.height} mouse = {mouse} click = {click} />}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    // {size && makes it not render at first, only when we have the size}\r\n}\r\n\r\n/**\r\n * @function getSavedLevel - gets the current level saved in local storage, or if none 0\r\n * @returns {Number} - returns the level saved in local storage\r\n */\r\nconst getSavedLevel = () => {\r\n    const inState = localStorage.getItem('level')\r\n    return inState ? parseInt(inState, 10) : 0\r\n  }\r\n  \r\n  /**\r\n   * @function getInitialState - gets the inital state of the level\r\n   * @param {*} containerSize \r\n   * @returns State \r\n   */\r\n  const getInitialState = containerSize => {\r\n    //const level = getSavedLevel(); //Grabs level we're at\r\n    const {level} = getInitialLevelState();\r\n    const ball = getInitialBallState();\r\n\r\n    const { projectDistance, projectVector, projectDistanceReverse, projectVectorReverse } = getProjection(containerSize, {x: GAME_WIDTH, y: GAME_HEIGHT});\r\n    \r\n\r\n    return {\r\n      level,\r\n      ball: ball,\r\n      containerSize,\r\n      projectDistance,\r\n      projectVector,\r\n      projectDistanceReverse,\r\n      projectVectorReverse,\r\n      oldMousePosition: 0,\r\n      newMousePosition: 0,\r\n      levelNumber: 2,\r\n      time: Date.now(),\r\n      isAiming: true\r\n      }\r\n  }\r\n  \r\n  /**\r\n   * @param {props} props - width and height props\r\n   */\r\n  const Scene = (props) => {\r\n    //UseReducer to manage state like redux\r\n    const [state, dispatch] = useReducer(reducer, props, getInitialState)\r\n    //act as an action dispatcher to the state, for useReducer\r\n    const act = (type, payload) => dispatch({ type, payload })\r\n    const svgContainer = useRef();\r\n    const pointer = useRef();\r\n    const ballPointer1 = useRef();\r\n    const ballPointer2 = useRef();\r\n    const ballPointer3 = useRef();\r\n    const ballPointer4 = useRef();\r\n    const ballPointer5 = useRef();\r\n\r\n    const [mousePosition, setMousePosition] = useState({x:0, y: 0});\r\n    const [ballAngle, setBallAngle] = useState({x:0, y: 0});\r\n\r\n    //Extract each component from the current State\r\n    const {\r\n      projectDistance,\r\n      projectVector,\r\n      projectDistanceReverse,\r\n      projectVectorReverse,\r\n      level,\r\n      isAiming\r\n    } = state;\r\n\r\n    const viewWidth = projectDistance(GAME_WIDTH);\r\n    const viewHeight = projectDistance(GAME_HEIGHT);\r\n    const unit = projectDistance((1/5))\r\n\r\n    // let pointerCords = projectVector(state.ball.markerBall.center);\r\n    let mouseVector = new Vector(props.mouse.x, props.mouse.y);\r\n    let pointerCordX = projectDistanceReverse(mousePosition.x);\r\n    let pointerCordY = projectDistanceReverse(mousePosition.y);\r\n    let pointerCords = projectVector(new Vector(pointerCordX, pointerCordY));\r\n\r\n    let lineCords = projectVector(state.ball.markerBall.center);\r\n\r\n\r\n\r\n    //when the size of the screen size changes, update container size.\r\n    useEffect(() => {\r\n      act(ACTION.CONTAINER_SIZE_CHANGE, {width: props.width, height: props.height})\r\n      console.log(props.width)\r\n    },\r\n    [props.width, props.height]);\r\n\r\n    \r\n    useEffect(()=>{\r\n      if(props.click && state.isAiming) {\r\n        act(ACTION.AIMING, {angle: ballAngle});\r\n      }\r\n      },[state.isAiming, props.click, ballAngle]);\r\n\r\n\r\n      useEffect(()=> {\r\n        const onMouseMove = (e)=>{\r\n          setMousePosition({x: e.offsetX, y: e.offsetY})\r\n          var newDegree = Math.atan2(e.offsetY - lineCords.y, e.offsetX - lineCords.x);\r\n          setBallAngle(newDegree)\r\n          rotateElement(ballPointer1.current, lineCords.x, lineCords.y, e.offsetX, e.offsetY)\r\n          rotateElement(ballPointer2.current, lineCords.x, lineCords.y, e.offsetX, e.offsetY)\r\n          rotateElement(ballPointer3.current, lineCords.x, lineCords.y, e.offsetX, e.offsetY)\r\n          rotateElement(ballPointer4.current, lineCords.x, lineCords.y, e.offsetX, e.offsetY)\r\n          rotateElement(ballPointer5.current, lineCords.x, lineCords.y, e.offsetX, e.offsetY)\r\n\r\n      }\r\n      const unregisterMouseMoveListener = registerListenerByReference('mousemove', (e)=> onMouseMove(e), svgContainer);\r\n      return unregisterMouseMoveListener;\r\n\r\n      }, [lineCords.x, lineCords.y, setBallAngle])\r\n\r\n\r\n       const rotateElement = (el,originX,originY,towardsX,towardsY)=>{\r\n        var degrees = Math.atan2(towardsY-originY,towardsX-originX)*180/Math.PI + 90;\r\n        el.setAttribute(\r\n          'transform',\r\n          'translate('+originX+','+originY+') rotate('+degrees+') translate('+(-originX)+','+(-originY)+')'\r\n        );\r\n      }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        const tick = () => act(ACTION.TICK)//Tick tock, update state\r\n        const timerId = setInterval(tick, UPDATE_EVERY)//update state based on constant\r\n        //see what pressed the keyboard, and what to do\r\n        const onKeyUp = ({ which }) => act(ACTION.KEY_UP, which)\r\n        const unregisterKeyup = registerListener('keyup', onKeyUp)\r\n        //unregister when unmounting\r\n        return () => {\r\n        clearInterval(timerId)\r\n        unregisterKeyup()\r\n        }\r\n    }, [])\r\n  \r\n    //get current sizes for objects\r\n\r\n\r\n\r\n    return (\r\n      <svg width={viewWidth} height={viewHeight} className='scene' ref = {svgContainer}>\r\n          {state.level.levelList.map((props) => (\r\n            <Block\r\n              density={props.density}\r\n              key={`${props.position.x}-${props.position.y}`}\r\n              width={projectDistance(props.width)}\r\n              height={projectDistance(props.height)}\r\n              color = {props.color}\r\n              {...projectVector(props.position)}\r\n            />)\r\n          )}\r\n          {\r\n            state.ball.ballsArray.map((props)=> (<GameBall {...projectVector(props.center)} radius= {unit} key = {props.id}/>))\r\n          }\r\n        <GameBall {...projectVector(state.ball.markerBall.center)} radius={unit}/>\r\n        <circle  cx={lineCords.x} cy={lineCords.y - (((unit * 7) * 1.15) + (unit * .5))} r = {unit * .5} className = 'ball' ref = {ballPointer1}/>\r\n        <circle  cx={lineCords.x} cy={lineCords.y - (((unit * 7) * .90) + (unit * .6))} r = {unit * .6} className = 'ball' ref = {ballPointer2}/>\r\n        <circle  cx={lineCords.x} cy={lineCords.y - (((unit * 7) * .65) + (unit * .7))} r = {unit * .7} className = 'ball' ref = {ballPointer3}/>\r\n        <circle  cx={lineCords.x} cy={lineCords.y - (((unit * 7) * .40) + (unit * .8))} r = {unit * .8} className = 'ball' ref = {ballPointer4}/>\r\n        <circle  cx={lineCords.x} cy={lineCords.y - (((unit * 7) * .15) + (unit * .9))} r = {unit * .9} className = 'ball' ref = {ballPointer5}/>\r\n      </svg>\r\n    )\r\n  }","import React from 'react';\nimport './App.css';\nimport {GamePage} from './Game/game'\nfunction App() {\n\n  return (\n      <GamePage/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}