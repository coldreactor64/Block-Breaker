{"version":3,"sources":["utils.js","constants.js","Game/gameComponents.js","Engine/vector.js","Engine/ballphysics.js","Engine/levels.js","Engine/core.js","Game/state.js","Game/game.js","App.js","serviceWorker.js","index.js"],"names":["registerListener","eventName","handler","window","addEventListener","removeEventListener","guidGenerator","S4","Math","random","toString","substring","getRandomFrom","args","floor","length","colors","GAME_WIDTH","GAME_HEIGHT","GameBall","x","y","radius","className","cx","cy","r","Block","width","height","density","color","fill","rx","font-size","Vector","this","number","hypot","scaleBy","other","amt","dotProduct","normal","subtract","projectOn","degrees","radians","PI","toRadians","cos","sin","atan2","crossProduct","LEFT","RIGHT","UP","DOWN","LEFT_UP","add","normalize","RIGHT_UP","Ball","angle","id","center","direction","BallPhysics","boundaryCheck","objectSide","objectSide2","boundarySide","boundarySide2","ballsArray","markerBall","firstBall","isStarted","Number","isNaN","newBall","push","state","timespan","forEach","ball","level","distance","ballIndex","findIndex","oldDirection","newBallCenter","ballBottom","newArray","filter","filterBall","withNewBallProps","props","withNewBallDirection","reflect","ballLeft","ballRight","ballTop","block","levelList","find","position","filterBlock","blockTop","blockBottom","blockLeft","getNewBallNormal","levelNumber","index","makeBlock","randomize","Levels","currentLevel","newlevelArray","transformLevelsDown","i","newBlock","unshift","flat","element","elementPosition","newElementPosition","getProjection","containerSize","gameSize","widthRatio","heightRatio","screenUnit","min","projectDistance","projectDistanceReverse","projectVector","vector","projectVectorReverse","ACTION","CONTAINER_SIZE_CHANGE","KEY_UP","MOUSE_MOVE","TICK","reducer","type","payload","containerSizeChange","onKeyUp","AIMING","aimBalls","mouseMove","tick","isAiming","setTimeout","addBall","mousePosition","oldMousePosition","newMousePosition","key","movement","undefined","time","Date","now","newState","updatePhysics","addLevel","reset","GamePage","gameContainer","useRef","useState","size","setSize","mouse","click","setClick","useEffect","onResize","current","getBoundingClientRect","unregisterResizeListener","unregisterMouseDownListener","e","unregisterMouseUpListener","ref","getInitialState","getInitialLevelState","Scene","useReducer","dispatch","act","svgContainer","ballPointer1","ballPointer2","ballPointer3","ballPointer4","ballPointer5","setMousePosition","ballAngle","setBallAngle","viewWidth","viewHeight","unit","pointerCordX","pointerCordY","lineCords","reference","offsetX","offsetY","newDegree","rotateElement","onMouseMove","el","originX","originY","towardsX","towardsY","setAttribute","timerId","setInterval","unregisterKeyup","which","clearInterval","map","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.816ef5ed.chunk.js","sourcesContent":["export const registerListener = (eventName, handler) => {\r\n    window.addEventListener(eventName, handler);\r\n    return () => window.removeEventListener(eventName, handler);\r\n}\r\n\r\nexport const registerListenerByReference = (eventName, handler, reference) => {\r\n    reference.current.addEventListener(eventName, handler);\r\n    return () => reference.current.removeEventListener(eventName, handler);\r\n}\r\n\r\nexport const mapNumbers = (num, in_min, in_max, out_min, out_max) => {\r\n    return (num - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\r\n  }\r\n  \r\nexport function guidGenerator() {\r\n    var S4 = function() {\r\n      return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\r\n    };\r\n    return (S4() + S4() + '-' + S4() + S4());\r\n  }\r\n\r\nexport const flatten = arrays => arrays.reduce((acc, row)=>[...acc, ...row], []);\r\nexport const getRange = length => [...Array(length).keys()];\r\nexport const toDegrees = radians => (radians * 180) / Math.PI\r\nexport const toRadians = degrees => (degrees * Math.PI) / 180\r\nexport const withoutElement = (array, element) => array.filter(e => e !== element)\r\nexport const updateElement = (array, oldElement, newElement) => array.map(e => e === oldElement ? newElement : e)\r\nexport const getRandomFrom = (...args) => args[Math.floor(Math.random()* args.length)]\r\n","\r\nexport const colors = [\"#4ABFF0\",  \"#F23737\",  \"#835995\", \"#9FCE31\", \"#FFCC00\"];\r\nexport const PADDLE_AREA = 1 / 3\r\nexport const BLOCK_HEIGHT = 1 / 3\r\nexport const PADDLE_HEIGHT = BLOCK_HEIGHT\r\nexport const BALL_RADIUS = 1 / 5\r\nexport const DISTANCE_IN_MS = 0.01\r\nexport const UPDATE_EVERY = 1000 / 60\r\nexport const MAX_BLOCK_DENSITY = 3;\r\nexport const GAME_WIDTH = 9;\r\nexport const GAME_HEIGHT = 11;\r\nexport const MOVEMENT = {\r\n    LEFT: 'LEFT',\r\n    RIGHT: 'RIGHT'\r\n}\r\n","import React from 'react';\r\nimport {colors} from '../constants'\r\nexport const GameBall = ({x,y, radius}) => (\r\n    <circle className = 'ball' cx={x} cy={y} r = {radius}/>\r\n)\r\n\r\nconst getBlockColors = (density) => {\r\n    if (density % 2){\r\n        return colors[1]\r\n    }\r\n    if (density % 3){\r\n        return colors[2]\r\n    }\r\n    if (density % 4){\r\n        return colors[3]\r\n    }\r\n    if (density % 5){\r\n        return colors[4]\r\n    }\r\n}\r\n\r\nexport const Block =({ x, y, width, height, density, color }) => {\r\n    return (\r\n    <g>\r\n    <rect className='block' fill={color} x={x} y={y}  rx = {width / 16} width={width - 5} height={height-3} />\r\n    <text x={(x + (width / 2) - 6)} y = {y + (height / 2) + 3} font-size = {20} className = 'ballid'>\r\n        {density}\r\n    </text>\r\n    </g>\r\n);\r\n}\r\n\r\nexport const LevelLabel = ({level, unit}) => (\r\n    <text x={unit} y = {unit * 2} className = 'level'>\r\n        LEVEL: {level}\r\n    </text>\r\n)\r\n\r\n\r\n\r\nexport const Paddle = ({ x, y, width, height }) => (\r\n    <rect className='paddle' x={x} y={y} width={width} height={height}  rx = {width / 16} />\r\n  )\r\n\r\n\r\nexport const trajectoryPointer = (circlemarker, projectvector) => {\r\n    let {x, y} = projectvector(circlemarker);\r\n    return (\r\n    <>\r\n    <circle className = 'ball' cx={x} cy={y} r = {1/5} style = {{transformOrigin: \"0px 10px\", transform: \"rotate(30)\"}} />\r\n    </>\r\n    )\r\n}","import { toDegrees, toRadians } from '../utils'\r\n\r\n\r\nexport default class Vector {\r\n    constructor(x, y) {\r\n      this.x = x\r\n      this.y = y\r\n    }\r\n  \r\n    scaleBy(number) {\r\n      return new Vector(this.x * number, this.y * number);\r\n    }\r\n  \r\n    length() {\r\n      return Math.hypot(this.x, this.y)\r\n    }\r\n  \r\n    add({ x, y }) {\r\n      return new Vector(this.x + x, this.y + y)\r\n    }\r\n  \r\n    normalize() {\r\n      return this.scaleBy(1 / this.length())\r\n    }\r\n    \r\n    subtract({ x, y }) {\r\n      return new Vector(this.x - x, this.y - y)\r\n    }\r\n  \r\n    dotProduct({ x, y }) {\r\n      return this.x * x + this.y * y\r\n    }\r\n  \r\n    projectOn(other) {\r\n      const amt = this.dotProduct(other) / other.length()\r\n      return new Vector(amt * other.x, amt * other.y)\r\n    }\r\n  \r\n    reflect(normal) {\r\n      return this.subtract(this.projectOn(normal).scaleBy(2))\r\n    }\r\n  \r\n    rotate(degrees) {\r\n      const radians = toRadians(degrees)\r\n      const cos = Math.cos(radians)\r\n      const sin = Math.sin(radians)\r\n  \r\n      return new Vector(\r\n        this.x * cos - this.y * sin,\r\n        this.x * sin + this.y * cos\r\n      )\r\n    }\r\n  \r\n    crossProduct({ x, y }) {\r\n      return this.x * y - x * this.y\r\n    }\r\n  \r\n    angleBetween(other) {\r\n      return toDegrees(\r\n        Math.atan2(this.crossProduct(other), this.dotProduct(other))\r\n      )\r\n    }\r\n  }","import Vector from './vector'\r\nimport {guidGenerator, getRandomFrom} from '../utils'\r\nimport {GAME_HEIGHT, GAME_WIDTH, DISTANCE_IN_MS} from '../constants'\r\n\r\nconst LEFT = new Vector(-1, 0);\r\nconst RIGHT = new Vector(1, 0);\r\nconst UP = new Vector(0, -1);\r\nconst DOWN = new Vector(0, 1);\r\nconst LEFT_UP = LEFT.add(UP).normalize();\r\nconst RIGHT_UP = RIGHT.add(UP).normalize();\r\nconst LEFT_DOWN = LEFT.add(DOWN).normalize();\r\nconst RIGHT_DOWN= RIGHT.add(DOWN).normalize();\r\n\r\nclass Ball {\r\n    constructor(x,y, angle, radius, id){\r\n      this.center = new Vector(x, y);\r\n      this.direction = angle;\r\n      this.radius = radius;\r\n      this.id = id;\r\n    }\r\n}\r\n\r\nexport class BallPhysics {\r\n    constructor() {\r\n      this.ballsArray = [];\r\n      this.markerBall = new Ball(GAME_WIDTH / 2, GAME_HEIGHT - ( 1 / 5), getRandomFrom(LEFT_UP, RIGHT_UP), 1/5, 0);\r\n      this.firstBall = false;\r\n      this.isStarted = false;\r\n    }\r\n  \r\n  \r\n    reset() {\r\n      this.firstBall = false;\r\n      this.isStarted = false;\r\n    }\r\n\r\n    addBall(angle){\r\n      if(Number.isNaN(angle.x) || Number.isNaN(angle.y)){}//check if ball is valid\r\n        else{\r\n          //TODO add ball size as variable\r\n          let id = guidGenerator();\r\n          let newBall = new Ball(this.markerBall.center.x, this.markerBall.center.y, angle, 1/5, id);\r\n          this.ballsArray.push(newBall);\r\n          this.isStarted = true;\r\n      }\r\n    }\r\n  \r\n    boundaryCheck = (objectSide, objectSide2, boundarySide, boundarySide2) => (\r\n        (objectSide >= boundarySide && objectSide <= boundarySide2) ||\r\n        (objectSide2 >= boundarySide && objectSide2 <= boundarySide2)  \r\n    )\r\n\r\n\r\n    //We will update physics passing in the block state, and then returning updated block and ball state to render\r\n    updatePhysics(state, timespan){\r\n        this.ballsArray.forEach(ball => {\r\n          const { level } = state\r\n          const distance = timespan * DISTANCE_IN_MS\r\n          var ballIndex = this.ballsArray.findIndex(x => x.id == ball.id);\r\n          const { radius } = ball\r\n          const oldDirection = ball.direction\r\n          const newBallCenter = ball.center.add(oldDirection.scaleBy(distance))\r\n          const ballBottom = newBallCenter.y + radius\r\n  \r\n          // Delete if above gameheight \r\n          if (ballBottom > GAME_HEIGHT) {\r\n            //check if its the first ball to hit the bottom\r\n            if (this.firstBall === false) {\r\n              this.firstBall = true;\r\n              this.markerBall = new Ball(ball.center.x, GAME_HEIGHT - (1/5), {x: 0, y: 0}, 1/5, 0)\r\n            }\r\n            //filter out this element\r\n            let newArray = this.ballsArray.filter(filterBall => filterBall.id != ball.id);\r\n            return (this.ballsArray = newArray);\r\n          }\r\n          \r\n          const withNewBallProps = props => {\r\n              this.ballsArray[ballIndex] = {\r\n                ...ball,\r\n                ...props\r\n              }\r\n            return;\r\n          }\r\n  \r\n          const withNewBallDirection = normal => {\r\n            //  const distorted = distortVector(oldDirection.reflect(normal))\r\n            //  const direction = adjustVector(normal, distorted)\r\n            const direction = oldDirection.reflect(normal);\r\n            return withNewBallProps({ direction }) \r\n          }\r\n          const ballLeft = newBallCenter.x - radius\r\n          const ballRight = newBallCenter.x + radius\r\n          const ballTop = newBallCenter.y - radius\r\n      \r\n          if (ballTop <= 0) return withNewBallDirection(DOWN)\r\n          if (ballLeft <= 0) return withNewBallDirection(RIGHT)\r\n          if (ballRight >= GAME_WIDTH) return withNewBallDirection(LEFT)\r\n        \r\n          const block = level.levelList.find(({ position, width, height }) => (\r\n            this.boundaryCheck(ballTop, ballBottom, position.y, position.y + height) &&\r\n            this.boundaryCheck(ballLeft, ballRight, position.x, position.x + width) \r\n          ))\r\n      \r\n      \r\n          if (block) {\r\n            block.density = block.density - 1\r\n            if (block.density <= 0){\r\n              let newArray = state.level.levelList.filter(filterBlock => filterBlock.id != block.id);\r\n              state.level.levelList = newArray;\r\n            }\r\n            const getNewBallNormal = () => {\r\n  \r\n              const blockTop = block.position.y\r\n              const blockBottom = blockTop + block.height\r\n              const blockLeft = block.position.x\r\n                //if in between bottom and top\r\n              if (ballTop > blockTop - radius && ballBottom < blockBottom + radius) {\r\n                if (ballLeft < blockLeft) return LEFT\r\n                if (ballRight > blockLeft + block.width) return RIGHT;\r\n              }\r\n            //else \r\n            //Handle bottom corners\r\n            if (ballTop>blockTop && ballLeft < blockLeft) return getRandomFrom(LEFT, DOWN);\r\n            if (ballTop>blockTop && ballRight > blockLeft + block.width) return getRandomFrom(RIGHT, DOWN); \r\n              //handle bottom\r\n            if (ballTop > blockTop) return DOWN\r\n              //handle top corners\r\n            if (ballTop <= blockTop && ballLeft < blockLeft) return getRandomFrom(LEFT, DOWN);\r\n            if (ballTop <= blockTop && ballRight > blockLeft + block.width) return getRandomFrom(RIGHT, DOWN);\r\n              //handle top\r\n            if (ballTop <= blockTop) return UP;\r\n\r\n            }\r\n            return {\r\n              ...withNewBallDirection(getNewBallNormal())\r\n            }\r\n          }\r\n          return withNewBallProps({ center: newBallCenter })\r\n        })\r\n  \r\n        return state;\r\n    }\r\n  }","import {GAME_WIDTH, colors} from '../constants'\r\n//import { flatten } from '../utils'\r\nimport Vector from './vector'\r\nimport { guidGenerator, getRandomFrom } from '../utils';\r\n//TODO: generate Block other position parameters based on position\r\nconst DOWN = new Vector(0, 1);\r\n\r\nclass Block {\r\n    constructor(levelNumber, index) {\r\n        this.makeBlock = this.randomize();\r\n        this.density = levelNumber;\r\n        this.position = new Vector(index, 0) // X, Y cords1Q ``` \r\n        this.width = 1;\r\n        this.height = 1;\r\n        this.id = guidGenerator();\r\n        this.color = colors[Math.floor(Math.random() * colors.length)]\r\n\r\n    }\r\n\r\n    add(x, y) {\r\n        this.position.add(x, y);\r\n    }\r\n\r\n    randomize() {\r\n        return Math.floor(Math.random() * 1.6);\r\n    }\r\n\r\n}\r\n\r\nexport class Levels  {\r\n    constructor(){\r\n        this.levelList = [];\r\n        this.currentLevel = 0;\r\n    }\r\n\r\n    addLevel(){\r\n        this.currentLevel++;\r\n        let newlevelArray = [];\r\n        if (this.levelList !== []){\r\n            this.transformLevelsDown();\r\n        }\r\n        for( let i = 0;  i < GAME_WIDTH; i++){\r\n            let newBlock = new Block(this.currentLevel, i);\r\n            if (newBlock.makeBlock !== 0) {\r\n                newlevelArray.push(newBlock);\r\n            }\r\n\r\n        }\r\n        this.levelList.unshift(newlevelArray);\r\n        this.levelList = this.levelList.flat();\r\n\r\n    }\r\n\r\n    transformLevelsDown(){   \r\n        this.levelList.forEach(element => {\r\n            const elementPosition = element.position;\r\n            const newElementPosition = new Vector(elementPosition.x, elementPosition.y + 1);\r\n            element.position = newElementPosition;\r\n        })\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\n","import Vector from \"./vector\";\r\nimport {getRandomFrom, guidGenerator} from '../utils'\r\nimport {GAME_HEIGHT, GAME_WIDTH} from '../constants'\r\nimport {BallPhysics} from './ballphysics'\r\nimport {Levels} from './levels';\r\n//Game core puts size and positions in relative to game size which then gets projected to the actual size\r\n\r\n\r\n\r\n/**\r\n * @function getInitialPaddleAndBallState - Returns the initial state and Ball\r\n * @param {Number} gameWidth Game nonprojected width\r\n * @param {Number} gameHeight Game nonprojected Height\r\n * @param {Number} paddleWidth Width of the paddle per level.\r\n * @returns {JSON} Returns paddle and ball state\r\n */\r\n// export const getInitialBallPosition = (gameWidth, gameHeight) => {\r\n//     const ball = {\r\n//         center: new Vector(GAME_WIDTH / 2, GAME_HEIGHT - ( 1 / 5)),\r\n//         radius: 1 / 5,\r\n//         direction: getRandomFrom(LEFT_UP, RIGHT_UP)\r\n//       }\r\n//     return {\r\n//         ball\r\n//     }\r\n// }\r\n\r\n\r\nexport const getInitialLevelState = () => \r\n{   \r\n    let level = new Levels();\r\n    level.addLevel(1);\r\n    return {\r\n        level: level\r\n      }\r\n}\r\n\r\n\r\nexport const getInitialBallState = () => {\r\n  let balls = new BallPhysics();\r\n  return balls;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @function getProjection - gets the scaling size for the screen and container size\r\n * @param {*} containerSize - Size of the container {width: number, height: number}\r\n * @param {*} gameSize - Game Size to be projected on the container {width: number, height: number}\r\n * @returns {Function} - Returns two functions projectDistance, and projectVector\r\n */\r\n\r\nexport const getProjection = (containerSize, gameSize) => {\r\n    //Find the ratios between width and height compare to find the smallest\r\n    const widthRatio = containerSize.width / GAME_WIDTH\r\n    const heightRatio = containerSize.height / GAME_HEIGHT;\r\n    const screenUnit = Math.min(heightRatio, widthRatio);\r\n    return {\r\n        /**\r\n         * @function projectDistance - projects the distance onto the current screen size\r\n         * @param {Number} distance - distance to project\r\n         * @returns {Number} returns the position on screen\r\n         */\r\n\r\n        projectDistance: distance => distance * screenUnit,\r\n        projectDistanceReverse : distance => distance / screenUnit,\r\n        /**\r\n         * @function projectVector - projects the distance onto the current screen size\r\n         * @param {Vector} vector - vector to project to screen size\r\n         * @returns {Vector} returns scaled vector\r\n         */\r\n        projectVector: vector => vector.scaleBy(screenUnit),\r\n        projectVectorReverse: vector => vector.scaleBy(1 / screenUnit)\r\n\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @function distortVector - adds randomness to a vector\r\n * @param {*} vector -input vector to distort\r\n * @param {*} distortionLevel - Amount to distort\r\n */\r\n\r\nconst distortVector = (vector, distortionLevel = 0.3) => {\r\n    //get random components for the vector based on distortion level and create a new vector\r\n    const getComponent = () => Math.random() * distortionLevel - distortionLevel / 2\r\n    const distortion = new Vector(getComponent(), getComponent());\r\n    //add it to the vector and normalize it.\r\n    return vector.add(distortion).normalize()\r\n}\r\n\r\n\r\n/**\r\n * @function boundaryCheck - checks if we are inside another objects boundaries\r\n * @param {*} objectSide -Object we are checking side 1\r\n * @param {*} objectSide2 -object checking side 2\r\n * @param {*} boundarySide - boundary object side 1\r\n * @param {*} boundarySide2 - boundary object side 2\r\n */\r\nconst boundaryCheck = (objectSide, objectSide2, boundarySide, boundarySide2) => (\r\n    (objectSide >= boundarySide && objectSide <= boundarySide2) ||\r\n    (objectSide2 >= boundarySide && objectSide2 <= boundarySide2)  \r\n)\r\n\r\n/**\r\n * @function adjustVector - Adjusts ball so it never goes below certain degrees +90 and -90 degrees\r\n */\r\nconst adjustVector = (normal, vector, minAngle = 15) => {\r\n    const angle = normal.angleBetween(vector)\r\n    const maxAngle = 90 - minAngle\r\n    if (angle < 0) {\r\n      if (angle > -minAngle) {\r\n        return normal.rotate(-minAngle)\r\n      }\r\n      if (angle < -maxAngle) {\r\n        return normal.rotate(-maxAngle)\r\n      }\r\n    } else {\r\n      if (angle < minAngle) {\r\n        return normal.rotate(minAngle)\r\n      }\r\n      if (angle > maxAngle) {\r\n        return normal.rotate(maxAngle)\r\n      }\r\n    }\r\n    return vector\r\n}\r\n","import { MOVEMENT, updateGameState, getProjection, RIGHT_UP, LEFT_UP } from '../Engine/core'\r\nimport { GAME_WIDTH, GAME_HEIGHT } from '../constants'\r\nimport Vector from '../Engine/vector'\r\n\r\n \r\nexport const ACTION = {\r\n    CONTAINER_SIZE_CHANGE: 'CONTAINER_SIZE_CHANGE',\r\n    KEY_UP: 'KEY_UP',\r\n    MOUSE_MOVE: 'MOUSE_MOVE',\r\n    TICK: 'TICK'\r\n  }\r\n  \r\n /** Game Constants */\r\n  const MOVEMENT_KEYS = {\r\n    LEFT: [65, 37, \"ArrowLeft\"],\r\n    RIGHT: [68, 39, \"ArrowRight\"]\r\n  }\r\n\r\n  const STOP_KEY = 32\r\n\r\nexport const reducer = (state, { type, payload }) => {\r\n    switch(type) {\r\n        case ACTION.CONTAINER_SIZE_CHANGE:\r\n            return containerSizeChange(state, payload);\r\n        case ACTION.KEY_UP:\r\n            return onKeyUp(state, payload);\r\n        case ACTION.AIMING:\r\n            return aimBalls(state, payload)\r\n        case ACTION.MOUSE_MOVE:\r\n            return mouseMove(state, payload);\r\n        case ACTION.TICK:\r\n            return tick(state); \r\n        default:\r\n             return state;\r\n    }\r\n  }\r\n  \r\nconst containerSizeChange = (state, containerSize)=> ({\r\n    ...state,\r\n    containerSize,\r\n    ...getProjection(containerSize, {x: GAME_WIDTH, y: GAME_HEIGHT})\r\n  })\r\n\r\nconst aimBalls = (state, props) => {\r\n  state.isAiming = false;\r\n  for (let i = 0; i < state.levelNumber - 1; i++) {\r\n      setTimeout((i) => {\r\n        // console.log(props.angle);\r\n        state.ball.addBall(new Vector(Math.cos(props.angle), Math.sin(props.angle)));\r\n      }, 100 * i);\r\n  }\r\n  return state;\r\n}\r\nconst mouseMove = (state, mousePosition) => {\r\n    return {\r\n        ...state,\r\n        oldMousePosition: state.newMousePosition,\r\n        newMousePosition: mousePosition\r\n    }\r\n  }\r\nconst onKeyUp = (state, key) => {\r\n    const newState = { ...state, movement: undefined }\r\n    return newState\r\n}\r\n\r\nconst tick = (state) => {\r\n    if (state.isAiming) return state;\r\n    const time = Date.now()\r\n    // let newState = updateGameState({...state}, time - state.time)\r\n    let newState = state.ball.updatePhysics(state, (time - state.time));\r\n    if (newState.ball.isStarted && newState.ball.ballsArray.length === 0){\r\n      newState.ball.isStarted = false;\r\n      newState.level.addLevel();\r\n      newState.isAiming = true;\r\n      newState.levelNumber++;\r\n      newState.ball.reset();\r\n    }\r\n    newState = { ...newState, time }\r\n    return { ...newState }\r\n}\r\n\r\n ","import React, { useRef, useEffect, useState, useReducer } from 'react'\r\nimport {registerListener,registerListenerByReference, getRandomFrom, mapNumbers} from '../utils'\r\nimport {GameBall, Block, trajectoryPointer} from './gameComponents'\r\nimport { getInitialLevelState, getProjection, getInitialBallState } from '../Engine/core'\r\nimport {reducer, ACTION} from './state'\r\nimport {UPDATE_EVERY, GAME_WIDTH, GAME_HEIGHT} from '../constants'\r\nimport Vector from '../Engine/vector'\r\n\r\n\r\nexport const GamePage = () => {\r\n    const gameContainer = useRef();\r\n    const [size, setSize] = useState();\r\n    const [mouse, setMouse] = useState({x: 0, y: 0});\r\n    const [click, setClick] = useState(false);\r\n    useEffect(() => {\r\n      //TODO: Optimize the calls for listeners\r\n        const onResize = ()=>{\r\n            //On resize get the current size ofthe screen and set it\r\n            const {width, height} = gameContainer.current.getBoundingClientRect(); \r\n            setSize({width, height})\r\n        }\r\n        const unregisterResizeListener = registerListener('resize', onResize);\r\n        const onMouseDown = (e) => {\r\n          setClick(true);\r\n        }\r\n        const unregisterMouseDownListener = registerListener('mousedown',(e)=> onMouseDown(e));\r\n\r\n        const onMouseUp = (e) => {\r\n          setClick(false);\r\n        }\r\n        const unregisterMouseUpListener = registerListener('mouseup',(e)=> onMouseUp(e));\r\n        onResize();\r\n\r\n        return {unregisterResizeListener, unregisterMouseDownListener, unregisterMouseUpListener}; //unregister the listener when not rendered anymore\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className = 'page'>\r\n            <div className = 'scene-container' ref = {gameContainer}>\r\n                {size && <Scene width = {size.width} height = {size.height} mouse = {mouse} click = {click} />}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    // {size && makes it not render at first, only when we have the size}\r\n}\r\n\r\n/**\r\n * @function getSavedLevel - gets the current level saved in local storage, or if none 0\r\n * @returns {Number} - returns the level saved in local storage\r\n */\r\nconst getSavedLevel = () => {\r\n    const inState = localStorage.getItem('level')\r\n    return inState ? parseInt(inState, 10) : 0\r\n  }\r\n  \r\n  /**\r\n   * @function getInitialState - gets the inital state of the level\r\n   * @param {*} containerSize \r\n   * @returns State \r\n   */\r\n  const getInitialState = containerSize => {\r\n    //const level = getSavedLevel(); //Grabs level we're at\r\n    const {level} = getInitialLevelState();\r\n    const ball = getInitialBallState();\r\n\r\n    const { projectDistance, projectVector, projectDistanceReverse, projectVectorReverse } = getProjection(containerSize, {x: GAME_WIDTH, y: GAME_HEIGHT});\r\n    \r\n\r\n    return {\r\n      level,\r\n      ball: ball,\r\n      containerSize,\r\n      projectDistance,\r\n      projectVector,\r\n      projectDistanceReverse,\r\n      projectVectorReverse,\r\n      oldMousePosition: 0,\r\n      newMousePosition: 0,\r\n      levelNumber: 2,\r\n      time: Date.now(),\r\n      isAiming: true\r\n      }\r\n  }\r\n  \r\n  /**\r\n   * @param {props} props - width and height props\r\n   */\r\n  const Scene = (props) => {\r\n    //UseReducer to manage state like redux\r\n    const [state, dispatch] = useReducer(reducer, props, getInitialState)\r\n    //act as an action dispatcher to the state, for useReducer\r\n    const act = (type, payload) => dispatch({ type, payload })\r\n    const svgContainer = useRef();\r\n    const pointer = useRef();\r\n    const ballPointer1 = useRef();\r\n    const ballPointer2 = useRef();\r\n    const ballPointer3 = useRef();\r\n    const ballPointer4 = useRef();\r\n    const ballPointer5 = useRef();\r\n\r\n    const [mousePosition, setMousePosition] = useState({x:0, y: 0});\r\n    const [ballAngle, setBallAngle] = useState({x:0, y: 0});\r\n\r\n    //Extract each component from the current State\r\n    const {\r\n      projectDistance,\r\n      projectVector,\r\n      projectDistanceReverse,\r\n      projectVectorReverse,\r\n      level,\r\n      isAiming\r\n    } = state;\r\n\r\n    const viewWidth = projectDistance(GAME_WIDTH);\r\n    const viewHeight = projectDistance(GAME_HEIGHT);\r\n    const unit = projectDistance((1/5))\r\n\r\n    // let pointerCords = projectVector(state.ball.markerBall.center);\r\n    let mouseVector = new Vector(props.mouse.x, props.mouse.y);\r\n    let pointerCordX = projectDistanceReverse(mousePosition.x);\r\n    let pointerCordY = projectDistanceReverse(mousePosition.y);\r\n    let pointerCords = projectVector(new Vector(pointerCordX, pointerCordY));\r\n\r\n    let lineCords = projectVector(state.ball.markerBall.center);\r\n\r\n\r\n\r\n    //when the size of the screen size changes, update container size.\r\n    useEffect(() => {\r\n      act(ACTION.CONTAINER_SIZE_CHANGE, {width: props.width, height: props.height})\r\n      //console.log(props.width)\r\n    },\r\n    [props.width, props.height]);\r\n\r\n    \r\n    useEffect(()=>{\r\n      if(props.click && state.isAiming) {\r\n        act(ACTION.AIMING, {angle: ballAngle});\r\n      }\r\n      // if(props.click){\r\n      //   state.ball.addBall(new Vector(Math.cos(ballAngle),Math.sin(ballAngle)));\r\n      // }\r\n      },[state.isAiming, props.click, ballAngle]);\r\n\r\n\r\n      useEffect(()=> {\r\n        const onMouseMove = (e)=>{\r\n          setMousePosition({x: e.offsetX, y: e.offsetY})\r\n          var newDegree = Math.atan2(e.offsetY - lineCords.y, e.offsetX - lineCords.x);\r\n          setBallAngle(newDegree)\r\n          rotateElement(ballPointer1.current, lineCords.x, lineCords.y, e.offsetX, e.offsetY)\r\n          rotateElement(ballPointer2.current, lineCords.x, lineCords.y, e.offsetX, e.offsetY)\r\n          rotateElement(ballPointer3.current, lineCords.x, lineCords.y, e.offsetX, e.offsetY)\r\n          rotateElement(ballPointer4.current, lineCords.x, lineCords.y, e.offsetX, e.offsetY)\r\n          rotateElement(ballPointer5.current, lineCords.x, lineCords.y, e.offsetX, e.offsetY)\r\n\r\n      }\r\n      const unregisterMouseMoveListener = registerListenerByReference('mousemove', (e)=> onMouseMove(e), svgContainer);\r\n      return unregisterMouseMoveListener;\r\n\r\n      }, [lineCords.x, lineCords.y, setBallAngle])\r\n\r\n\r\n       const rotateElement = (el,originX,originY,towardsX,towardsY)=>{\r\n        var degrees = Math.atan2(towardsY-originY,towardsX-originX)*180/Math.PI + 90;\r\n        el.setAttribute(\r\n          'transform',\r\n          'translate('+originX+','+originY+') rotate('+degrees+') translate('+(-originX)+','+(-originY)+')'\r\n        );\r\n      }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        const tick = () => act(ACTION.TICK)//Tick tock, update state\r\n        const timerId = setInterval(tick, UPDATE_EVERY)//update state based on constant\r\n        //see what pressed the keyboard, and what to do\r\n        const onKeyUp = ({ which }) => act(ACTION.KEY_UP, which)\r\n        const unregisterKeyup = registerListener('keyup', onKeyUp)\r\n        //unregister when unmounting\r\n        return () => {\r\n        clearInterval(timerId)\r\n        unregisterKeyup()\r\n        }\r\n    }, [])\r\n  \r\n    //get current sizes for objects\r\n\r\n\r\n\r\n    return (\r\n      <svg width={viewWidth} height={viewHeight} className='scene' ref = {svgContainer}>\r\n          {state.level.levelList.map((props) => (\r\n            <Block\r\n              density={props.density}\r\n              key={`${props.position.x}-${props.position.y}`}\r\n              width={projectDistance(props.width)}\r\n              height={projectDistance(props.height)}\r\n              color = {props.color}\r\n              {...projectVector(props.position)}\r\n            />)\r\n          )}\r\n          {\r\n            state.ball.ballsArray.map((props)=> (<GameBall {...projectVector(props.center)} radius= {unit} key = {props.id}/>))\r\n          }\r\n        <GameBall {...projectVector(state.ball.markerBall.center)} radius={unit}/>\r\n        <circle  cx={lineCords.x} cy={lineCords.y - (((unit * 7) * 1.15) + (unit * .5))} r = {unit * .5} className = 'ball' ref = {ballPointer1}/>\r\n        <circle  cx={lineCords.x} cy={lineCords.y - (((unit * 7) * .90) + (unit * .6))} r = {unit * .6} className = 'ball' ref = {ballPointer2}/>\r\n        <circle  cx={lineCords.x} cy={lineCords.y - (((unit * 7) * .65) + (unit * .7))} r = {unit * .7} className = 'ball' ref = {ballPointer3}/>\r\n        <circle  cx={lineCords.x} cy={lineCords.y - (((unit * 7) * .40) + (unit * .8))} r = {unit * .8} className = 'ball' ref = {ballPointer4}/>\r\n        <circle  cx={lineCords.x} cy={lineCords.y - (((unit * 7) * .15) + (unit * .9))} r = {unit * .9} className = 'ball' ref = {ballPointer5}/>\r\n      </svg>\r\n    )\r\n  }","import React from 'react';\nimport './App.css';\nimport {GamePage} from './Game/game'\nfunction App() {\n\n  return (\n      <GamePage/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}